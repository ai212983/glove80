
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>


#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define ZMK_HELPER_STRINGIFY(x) #x

#define HYPR LC(RS(LA(LGUI)))
#define MEH LC(RS(LALT))

#define PRV_SPC F13
#define NXT_SPC F14
#define MSN_CTL F15
#define APP_LNC F16
#define APP_SWT F17

#define HUE_TMP F18
#define HUE_BRG F19
#define HUE_PWR F20

#define PRV_TAB LA(LG(LEFT))
#define NXT_TAB LA(LG(RIGHT))

#define HOST_OS 2  // set to 2 for macOS/Windows-Alt-Codes, default is 0 (Windows)

/*
 * helper.h
 *
 * Convenience macros simplifying ZMK's keymap configuration.
 * See https://github.com/urob/zmk-nodefree-config for documentation.
 */

#pragma once

#define ZMK_HELPER_STRINGIFY(x) #x

/* ZMK_BEHAVIOR */

#define ZMK_BEHAVIOR_CORE_caps_word   compatible = "zmk,behavior-caps-word";  #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_hold_tap    compatible = "zmk,behavior-hold-tap";   #binding-cells = <2>
#define ZMK_BEHAVIOR_CORE_key_repeat  compatible = "zmk,behavior-key-repeat"; #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_macro       compatible = "zmk,behavior-macro";      #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_mod_morph   compatible = "zmk,behavior-mod-morph";  #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_sticky_key  compatible = "zmk,behavior-sticky-key"; #binding-cells = <1>
#define ZMK_BEHAVIOR_CORE_tap_dance   compatible = "zmk,behavior-tap-dance";  #binding-cells = <0>
#define ZMK_BEHAVIOR_CORE_tri_state   compatible = "zmk,behavior-tri-state";  #binding-cells = <0>

#define ZMK_BEHAVIOR(name, type, ...) \
    / { \
        behaviors { \
            name: name { \
                label = ZMK_HELPER_STRINGIFY(ZB_ ## name); \
                ZMK_BEHAVIOR_CORE_ ## type; \
                __VA_ARGS__ \
            }; \
        }; \
    };

/* ZMK_LAYER */

#define MACRO_CHOOSER3(_1, _2, _3, FUNC, ...) FUNC
#define ZMK_LAYER(...) MACRO_CHOOSER3(__VA_ARGS__, ZMK_LAYER_3_ARGS, ZMK_LAYER_2_ARGS)(__VA_ARGS__)
#define ZMK_LAYER_2_ARGS(name, layout) \
    / { \
        keymap { \
            compatible = "zmk,keymap"; \
            layer_ ## name { \
                label = ZMK_HELPER_STRINGIFY(name); \
                bindings = <layout>; \
            }; \
        }; \
    };
#define ZMK_LAYER_3_ARGS(name, layout, sensors) \
    / { \
        keymap { \
            compatible = "zmk,keymap"; \
            layer_ ## name { \
                label = ZMK_HELPER_STRINGIFY(name); \
                bindings = <layout>; \
                sensor-bindings = <sensors>; \
            }; \
        }; \
    };

/* ZMK_COMBOS */

#define ALL 0xff
#if !defined COMBO_TERM
    #define COMBO_TERM 30
#endif
#if !defined COMBO_HOOK
    #define COMBO_HOOK
#endif

#define MACRO_CHOOSER5(_1, _2, _3, _4, _5, FUNC, ...) FUNC
#define ZMK_COMBO(...) MACRO_CHOOSER5(__VA_ARGS__, ZMK_COMBO_5_ARGS, ZMK_COMBO_4_ARGS)(__VA_ARGS__)
#define ZMK_COMBO_4_ARGS(name, combo_bindings, keypos, combo_layers) \
    ZMK_COMBO_5_ARGS(name, combo_bindings, keypos, combo_layers, COMBO_TERM)
#define ZMK_COMBO_5_ARGS(name, combo_bindings, keypos, combo_layers, combo_timeout) \
    / { \
        combos { \
            compatible = "zmk,combos"; \
            combo_ ## name { \
                timeout-ms = <combo_timeout>; \
                bindings = <combo_bindings>; \
                key-positions = <keypos>; \
                layers = <combo_layers>; \
                COMBO_HOOK \
            }; \
        }; \
    };

/* ZMK_CONDITIONAL_LAYER */

#define ZMK_CONDITIONAL_LAYER(if_layers, then_layer) \
    / { \
        conditional_layers { \
            compatible = "zmk,conditional-layers"; \
            tri_layer { \
                if-layers = <if_layers>; \
                then-layer = <then_layer>; \
            }; \
        }; \
    };

/* ZMK_UNICODE */

#if !defined OS_UNICODE_LEAD
    #if HOST_OS == 2
        #define OS_UNICODE_LEAD &macro_press &kp LALT      // macOS/Windows-Alt-Codes
    #elif HOST_OS == 1
        #define OS_UNICODE_LEAD &macro_tap &kp LS(LC(U))   // Linux
    #else
        #define OS_UNICODE_LEAD &macro_tap &kp RALT &kp U  // Windows + WinCompose (default)
    #endif
#endif
#if !defined OS_UNICODE_TRAIL
    #if HOST_OS == 2
        #define OS_UNICODE_TRAIL &macro_release &kp LALT  // macOS/Windows-Alt-Codes
    #elif HOST_OS == 1
        #define OS_UNICODE_TRAIL &macro_tap &kp SPACE     // Linux
    #else
        #define OS_UNICODE_TRAIL &macro_tap &kp RET       // Windows + WinCompose (default)
    #endif
#endif

#define UC_MACRO(name, unicode_bindings) \
    / { \
        macros { \
            name: name { \
                compatible = "zmk,behavior-macro"; \
                label = ZMK_HELPER_STRINGIFY(UC_MACRO_ ## name); \
                wait-ms = <0>; \
                tap-ms = <0>; \
                #binding-cells = <0>; \
                bindings = <OS_UNICODE_LEAD>, <&macro_tap unicode_bindings>, <OS_UNICODE_TRAIL>; \
            }; \
        }; \
    };

#define UC_MODMORPH(name, uc_binding, shifted_uc_binding) \
    / { \
        behaviors { \
            name: name { \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(UC_MORPH_ ## name); \
                #binding-cells = <0>; \
                bindings = <uc_binding>, <shifted_uc_binding>; \
                mods = <(MOD_LSFT|MOD_RSFT)>; \
            }; \
        }; \
    };

#define ZMK_UNICODE_SINGLE(name, L0, L1, L2, L3) \
    UC_MACRO(name ## _lower, &kp L0 &kp L1 &kp L2 &kp L3) \
    UC_MODMORPH(name, &name ## _lower, &none)

#define ZMK_UNICODE_PAIR(name, L0, L1, L2, L3, U0, U1, U2, U3) \
    UC_MACRO(name ## _lower, &kp L0 &kp L1 &kp L2 &kp L3) \
    UC_MACRO(name ## _upper, &kp U0 &kp U1 &kp U2 &kp U3) \
    UC_MODMORPH(name, &name ## _lower, &name ## _upper)

/* Russian letters */
ZMK_UNICODE_PAIR(ru_a,  N0, N4, N3, N0,    N0, N4, N1, N0)
ZMK_UNICODE_PAIR(ru_b,  N0, N4, N3, N1,    N0, N4, N1, N1)
ZMK_UNICODE_PAIR(ru_v,  N0, N4, N3, N2,    N0, N4, N1, N2)
ZMK_UNICODE_PAIR(ru_g,  N0, N4, N3, N3,    N0, N4, N1, N3)
ZMK_UNICODE_PAIR(ru_d,  N0, N4, N3, N4,    N0, N4, N1, N4)
ZMK_UNICODE_PAIR(ru_e,  N0, N4, N3, N5,    N0, N4, N1, N5)
ZMK_UNICODE_PAIR(ru_zh, N0, N4, N3, N6,    N0, N4, N1, N6)
ZMK_UNICODE_PAIR(ru_z,  N0, N4, N3, N7,    N0, N4, N1, N7)
ZMK_UNICODE_PAIR(ru_i,  N0, N4, N3, N8,    N0, N4, N1, N8)
ZMK_UNICODE_PAIR(ru_iy, N0, N4, N3, N9,    N0, N4, N1, N9)
ZMK_UNICODE_PAIR(ru_k,  N0, N4, N3,  A,    N0, N4, N1,  A)
ZMK_UNICODE_PAIR(ru_l,  N0, N4, N3,  B,    N0, N4, N1,  B)
ZMK_UNICODE_PAIR(ru_m,  N0, N4, N3,  C,    N0, N4, N1,  C)
ZMK_UNICODE_PAIR(ru_n,  N0, N4, N3,  D,    N0, N4, N1,  D)
ZMK_UNICODE_PAIR(ru_o,  N0, N4, N3,  E,    N0, N4, N1,  E)
ZMK_UNICODE_PAIR(ru_p,  N0, N4, N3,  F,    N0, N4, N1,  F)
ZMK_UNICODE_PAIR(ru_r,  N0, N4, N4, N0,    N0, N4, N2, N0)
ZMK_UNICODE_PAIR(ru_s,  N0, N4, N4, N1,    N0, N4, N2, N1)
ZMK_UNICODE_PAIR(ru_t,  N0, N4, N4, N2,    N0, N4, N2, N2)
ZMK_UNICODE_PAIR(ru_u,  N0, N4, N4, N3,    N0, N4, N2, N3)
ZMK_UNICODE_PAIR(ru_f,  N0, N4, N4, N4,    N0, N4, N2, N4) 
ZMK_UNICODE_PAIR(ru_h,  N0, N4, N4, N5,    N0, N4, N2, N5)
ZMK_UNICODE_PAIR(ru_c,  N0, N4, N4, N6,    N0, N4, N2, N6)
ZMK_UNICODE_PAIR(ru_ch, N0, N4, N4, N7,    N0, N4, N2, N7)
ZMK_UNICODE_PAIR(ru_sh, N0, N4, N4, N8,    N0, N4, N2, N8)
ZMK_UNICODE_PAIR(ru_sc, N0, N4, N4, N9,    N0, N4, N2, N9)
ZMK_UNICODE_PAIR(ru_hs, N0, N4, N4,  A,    N0, N4, N2,  A)
ZMK_UNICODE_PAIR(ru_y,  N0, N4, N4,  B,    N0, N4, N2,  B)
ZMK_UNICODE_PAIR(ru_ss, N0, N4, N4,  C,    N0, N4, N2,  C)
ZMK_UNICODE_PAIR(ru_ae, N0, N4, N4,  D,    N0, N4, N2,  D)
ZMK_UNICODE_PAIR(ru_yu, N0, N4, N4,  E,    N0, N4, N2,  E)
ZMK_UNICODE_PAIR(ru_ya, N0, N4, N4,  F,    N0, N4, N2,  F)
ZMK_UNICODE_PAIR(ru_yo, N0, N4, N5, N1,    N0, N4, N0,  1)

UC_MODMORPH(ru_dot, &kp DOT, &kp QMARK)
UC_MODMORPH(ru_comm, &kp COMMA, &kp FSLH)
    
// bind keys swap to LEFT shift, so they do not intefere with MEH/HYPER
#define L_MODMORPH(name, uc_binding, shifted_uc_binding) \
    / { \
        behaviors { \
            name: name { \
                compatible = "zmk,behavior-mod-morph"; \
                label = ZMK_HELPER_STRINGIFY(UC_MORPH_ ## name); \
                #binding-cells = <0>; \
                bindings = <uc_binding>, <shifted_uc_binding>; \
                mods = <(MOD_LSFT)>; \
                keep-mods = <(MOD_LSFT)>; \
            }; \
        }; \
    };

L_MODMORPH(dqt_sqt, &kp DQT, &kp SQT)
L_MODMORPH(gra_til, &kp GRAVE, &kp TILDE)


/ {
    /* Glove80 system behavior & macros */

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
    };

    macros {
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
    };

    macros {
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
    };

    macros {
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */


    keymap {
        compatible = "zmk,keymap";


        base_layer {
            bindings = <
//  0
// ╭──────────┬──────┬──────┬────────┬────────╮                                                                                             ╭──────┬─────────┬────────┬────────┬────────╮    
   &kp F1     &kp F2 &kp F3 &kp F4   &kp F5                                                                                                 &kp F6 &kp F7    &kp F8   &kp F9   &kp F10
// ├──────────┼──────┼──────┼────────┼────────┼──────╮                                                                               ╭─────────────┼─────────┼────────┼────────┼────────┤
   &none      &kp N1 &kp N2 &kp N3   &kp N4   &kp N5                                                                                 &kp N6 &kp N7 &kp N8    &kp N9   &kp N0   &none
// ├──────────┼──────┼──────┼────────┼────────┼──────┤                                                                               ├──────┼──────┼─────────┼────────┼────────┼────────┤  
   &none      &kp Q  &kp D  &kp R    &kp W    &kp B                                                                                  &kp J  &kp F  &kp U     &kp P    &kp SEMI &kp BSLH
// ├──────────┼──────┼──────┼────────┼────────┼──────┤                                                                               ├──────┼──────┼─────────┼────────┼────────┼────────┤  
   &kp   HYPR &kp A  &kp S  &kp H    &kp T    &kp G                                                                                  &kp Y  &kp N  &kp E     &kp O    &kp I    &dqt_sqt
// ├──────────┼──────┼──────┼────────┼────────┼──────┤ ╭────────────┬──────────┬────────────╮  ╭───────────┬───────────┬───────────╮ ├──────┼──────┼─────────┼────────┼────────┼────────┤  
   &kp  LSHFT &kp Z  &kp X  &kp M    &kp C    &kp V    &kp LSHFT    &kp LCTRL  &none           &tog 1      &kp RCTRL   &kp RSHFT     &kp K  &kp L  &kp COMMA &kp DOT  &kp FSLH &gra_til
// ├──────────┼──────┼──────┼────────┼────────┼──────╯ ├────────────┼──────────┼────────────┤  ├───────────┼───────────┼───────────┤ ╰──────┼──────┼─────────┼────────┼────────┼────────┤    
   &magic 4 0 &none  &none  &kp LEFT &kp RIGHT         &mt LGUI ESC &lt 2 BSPC &mt LCTRL DEL   &mt MEH TAB &lt 3 SPACE &mt LALT RET         &kp UP &kp DOWN  &none    &none    &none
// ╰──────────┴──────┴──────┴────────┴────────╯        ╰────────────┴──────────┴────────────╯  ╰───────────┴───────────┴───────────╯        ╰──────┴─────────┴────────┴────────┴────────╯
            >;
        };

        layer_Russian {
            bindings = <
//  1
// ╭──────┬──────┬──────┬──────┬──────╮                                                              ╭──────┬──────┬──────┬──────┬───────╮    
   &trans &trans &trans &trans &trans                                                                &trans &trans &trans &trans &trans
// ├──────┼──────┼──────┼──────┼──────┼──────╮                                              ╭────────┼──────┼──────┼──────┼──────┼───────┤
   &none  &trans &trans &trans &trans &trans                                                &trans   &trans &trans &trans &trans &none
// ├──────┼──────┼──────┼──────┼──────┼──────┤                                              ├────────┼──────┼──────┼──────┼──────┼───────┤  
   &ru_c  &ru_ch &kp A  &ru_k  &ru_y  &ru_m                                                 &ru_v    &ru_l  &ru_z  &ru_sh &ru_iy &ru_f
// ├──────┼──────┼──────┼──────┼──────┼──────┤                                              ├────────┼──────┼──────┼──────┼──────┼───────┤  
   &ru_hs &ru_p  &ru_i  &ru_o  &ru_e  &ru_u                                                 &kp P    &ru_n  &ru_t  &ru_s  &ru_b  &ru_h
// ├──────┼──────┼──────┼──────┼──────┼──────┤ ╭──────┬──────┬─────╮  ╭──────┬──────┬─────╮ ├────────┼──────┼──────┼──────┼──────┼───────┤  
   &trans &ru_ae &ru_yu &ru_ss &ru_ya &ru_dot  &trans &trans &trans   &to 0  &trans &trans  &ru_comm &ru_g  &ru_d  &ru_zh &ru_sc &gra_til
// ├──────┼──────┼──────┼──────┼──────┼──────╯ ├──────┼──────┼─────┤  ├──────┼──────┼─────┤ ╰────────┼──────┼──────┼──────┼──────┼───────┤    
   &trans &none  &none  &trans &trans          &trans &trans &trans   &trans &trans &trans           &trans &trans &none  &none  &kp BSLH
// ╰──────┴──────┴──────┴──────┴──────╯        ╰──────┴──────┴─────╯  ╰──────┴──────┴─────╯          ╰──────┴──────┴──────┴──────┴───────╯
            >;
        };

        layer_NavNum {
            bindings = <
//  2
// ╭──────┬──────┬────────┬────────┬─────────╮                                                                           ╭─────────┬─────────┬──────────┬───────────────┬────────────╮
   &none  &none  &none    &none    &none                                                                                 &none     &none     &none      &none           &none
// ├──────┼──────┼────────┼────────┼─────────┼────────╮                                                        ╭─────────┼─────────┼─────────┼──────────┼───────────────┼────────────┤
   &none  &none  &none    &none    &none     &none                                                             &none     &none     &none     &none      &none           &none
// ├──────┼──────┼────────┼────────┼─────────┼────────┤                                                        ├─────────┼─────────┼─────────┼──────────┼───────────────┼────────────┤
   &none  &none  &kp HOME &kp  UP  &kp  END  &kp PG_UP                                                         &kp PRCNT &kp KP_N7 &kp KP_N8 &kp KP_N9  &kp KP_MULTIPLY &kp KP_DIVIDE
// ├──────┼──────┼────────┼────────┼─────────┼────────┤                                                        ├─────────┼─────────┼─────────┼──────────┼───────────────┼────────────┤
   &trans &none  &kp LEFT &kp DOWN &kp RIGHT &kp PG_DN                                                         &none     &kp KP_N4 &kp KP_N5 &kp KP_N6  &kp KP_MINUS    &none
// ├──────┼──────┼────────┼────────┼─────────┼────────┤ ╭────────┬──────┬────────╮  ╭──────┬──────┬──────────╮ ├─────────┼─────────┼─────────┼──────────┼───────────────┼────────────┤
   &trans &none  &none    &none    &none     &none      &trans   &trans &trans      &none  &trans &trans       &kp KP_N0 &kp KP_N1 &kp KP_N2 &kp KP_N3  &kp KP_PLUS     &kp KP_ENTER
// ├──────┼──────┼────────┼────────┼─────────┼────────╯ ├────────┼──────┼────────┤  ├──────┼──────┼──────────┤ ╰─────────┼─────────┼─────────┼──────────┼───────────────┼────────────┤    
   &trans &none  &none    &trans &trans                 &kp LALT &trans &kp LCTRL   &trans &trans &kp LA(RET)            &trans    &trans    &kp KP_DOT &kp BSPC        &none
// ╰──────┴──────┴────────┴────────┴─────────╯          ╰────────┴──────┴────────╯  ╰──────┴──────┴──────────╯           ╰─────────┴─────────┴──────────┴───────────────┴────────────╯
            >;
        };

        layer_Symbols {
            bindings = <
//  3
// ╭──────┬────────┬────────┬────────┬─────────╮                                                                 ╭─────────┬────────┬───────────┬───────────┬──────────╮
   &none  &none    &none    &none    &none                                                                       &none    &none     &none       &none       &none
// ├──────┼────────┼────────┼────────┼─────────┼────────╮                                              ╭─────────┼─────────┼────────┼───────────┼───────────┼──────────┤
   &none  &kp F1   &kp F2   &kp  F3  &kp  F4   &kp  F5                                                 &kp F6    &kp F7    &kp F8   &kp F9      &kp F10     &none 
// ├──────┼────────┼────────┼────────┼─────────┼────────┤                                              ├─────────┼─────────┼────────┼───────────┼───────────┼──────────┤
   &none  &kp EXCL &kp AT   &kp HASH &kp DLLR  &kp PRCNT                                               &kp CARET &kp LBKT  &kp RBKT &kp PRV_SPC &kp NXT_SPC &kp APP_LNC
// ├──────┼────────┼────────┼────────┼─────────┼────────┤                                              ├─────────┼─────────┼────────┼───────────┼───────────┼──────────┤
   &trans &none    &none    &kp PLUS &kp MINUS &kp EQUAL                                               &kp STAR  &kp LPAR  &kp RPAR &kp PRV_TAB &kp NXT_TAB &kp APP_SWT
// ├──────┼────────┼────────┼────────┼─────────┼────────┤ ╭──────┬──────┬─────╮  ╭──────┬──────┬─────╮ ├─────────┼─────────┼────────┼───────────┼───────────┼──────────┤
   &trans &none    &none    &none    &kp UNDER &none      &trans &trans &trans   &none  &trans &trans  &kp AMPS  &kp LBRC  &kp RBRC &none       &none       &kp MSN_CTL
// ├──────┼────────┼────────┼────────┼─────────┼────────╯ ├──────┼──────┼─────┤  ├──────┼──────┼─────┤ ╰─────────┼─────────┼────────┼───────────┼───────────┼──────────┤    
   &trans &none    &none    &trans   &trans               &trans &trans &trans   &trans &trans &trans            &trans    &trans   &none       &none       &none
// ╰──────┴────────┴────────┴────────┴─────────╯          ╰──────┴──────┴─────╯  ╰──────┴──────┴─────╯           ╰─────────┴────────┴───────────┴───────────┴──────────╯
            >;
        };

        layer_Magic {
            bindings = <
//  3
// ╭───────────┬───────────────┬───────────────┬───────────────┬───────────────╮                                                                     ╭─────┬─────┬─────┬─────┬─────────────╮
   &bt BT_CLR  &none           &none           &none           &none                                                                                 &none &none &none &none &bt BT_CLR_ALL
// ├───────────┼───────────────┼───────────────┼───────────────┼───────────────┼──────────────╮                                                ╭─────┼─────┼─────┼─────┼─────┼─────────────┤
   &none       &none           &none           &none           &none           &none                                                           &none &none &none &none &none &none
// ├───────────┼───────────────┼───────────────┼───────────────┼───────────────┼──────────────┤                                                ├─────┼─────┼─────┼─────┼─────┼─────────────┤
   &trans      &rgb_ug RGB_SPI &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                 &none &none &none &none &none &none
// ├───────────┼───────────────┼───────────────┼───────────────┼───────────────┼──────────────┤                                                ├─────┼─────┼─────┼─────┼─────┼─────────────┤
   &bootloader &rgb_ug RGB_SPD &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                 &none &none &none &none &none &bootloader
// ├───────────┼───────────────┼───────────────┼───────────────┼───────────────┼──────────────┤ ╭──────┬─────┬───────────╮  ╭─────┬─────┬────╮ ├─────┼─────┼─────┼─────┼─────┼─────────────┤
   &reset      &none           &none           &none           &none           &none            &bt_2  &bt_3 &none          &none &none &none  &none &none &none &none &none &reset
// ├───────────┼───────────────┼───────────────┼───────────────┼───────────────┼────────╯       ├──────┼─────┼───────────┤  ├─────┼─────┼────┤ ╰─────┼─────┼─────┼─────┼─────┼─────────────┤
   &none       &none           &none           &none           &none                            &bt_0  &bt_1 &out OUT_USB   &none &none &none        &none &none &none &none &none
// ╰───────────┴───────────────┴───────────────┴───────────────┴───────────────╯                ╰──────┴─────┴───────────╯  ╰─────┴─────┴────╯       ╰─────┴─────┴─────┴─────┴─────────────╯
            >;
        };

    };
};
